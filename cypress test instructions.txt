Good, now we need to update our test. I realized since we're using a testdb server it doesn't matter if I remove the user or not, so I deleted that logic, however now we need to account for the true initial process when the db is empty. We need to start by registering a user with the manager role. Once a manger is registered, they are redirected to the /manager-dashboard, which will present them with a form to create a restaurant (because a new user does not have a restaurant). All fields in the Create Restaurant form are required:
          <p>No restaurant found. Please create one.</p>
          <form onSubmit={handleSubmit}>
            <input type="text" name="name" placeholder="Restaurant Name" onChange={handleChange} required />
            <input type="text" name="street" placeholder="Street" onChange={handleChange} required />
            <input type="text" name="city" placeholder="City" onChange={handleChange} required />
            <input type="text" name="state" placeholder="State" onChange={handleChange} required />
            <input type="text" name="zip" placeholder="ZIP Code" onChange={handleChange} required />
            <input type="text" name="contact" placeholder="Contact" onChange={handleChange} required />
            <button type="submit">Create Restaurant</button>
          </form>
        </div>

Note also, the address MUST be a valid address as it will be geolocated through google's api. 

Next, they will be redirected to the true manager dashboard. From here, they should click the "Manage Menus" button to navigate to the menu manager. From there, they should be presented with a field to create a menu, as they don't have one yet. Just one field is required, 'name'. Once they hit create menu a new block will pop up showing their new menu's name along with the option 'Add Item'. We will click this and add 1 item. Then we will click Add Item again and add one more item. Then we will click update menu and be redirected to the managermenus page. Then we will click edit menu again from that page, and remove an item (doesn't matter which of the two, but there will be two remove buttons so take that into account), then we will again update the menu. Once we have finished adding and updating the menu, we will log out, and register as a user, this user will be redirected to the restaurants page '/' once they are logged in. From there, they should input a valid address that is within the proximity range of the restaurant the manager has created. If the address is within the proximity, the restaurant should appear in the list with the button "view menu". The user should click that button. They should be presented with a list of menu items (should only be one item after the updates from the manager). The user should click add to cart. Then they should navigate to the cart by clicking on the cart icon. Once in the cart, they should attempt to increase the item count by one, and decrease the item count by one. These changes should be reflected in the cart. Then they should proceed to checkout, and input relevant information to the stripe embedded checkout. The required fields for the embedded checkout are 'Email' (use my email alexhann25@gmail.com so I can verify the nodemailer), Card information: { Card Number: 4242424242424242, MM/YY: doesn't matter as long as it is after YY=25), Cardholder Name: Doesn't matter, any mock data, Address: Uses google's search autofill for address }

Then the user should UNCHECK save my info for 1-click checkout with link, and click pay. The user should be redirected to the "Order Confirmation" page. The user should then click the hamburger menu and navigate to 'Orders'. Then they should click the hamburger menu again and log out. Then we should log the manager back in, and verify that the order displays on the manager dashboard, and we should test clicking the different status update buttons 'accept', 'preparing', 'completed'. We should verify that if the manager clicks completed, the order should hide while "Show Completed Orders" is the fourth buttons text, and the order should once again show with the "Completed" status highlighted if the manager clicks "Show Completed Orders" (this button will change to say Hide Completed Orders when the manager clicks show). Then, the manager should log out and the test should finish.